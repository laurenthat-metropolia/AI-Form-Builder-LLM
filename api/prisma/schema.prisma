datasource db {
  provider          = "postgresql"
  url               = env("APP_DATABASE_URL")
  shadowDatabaseUrl = "postgresql://postgres:V7NHzBm6U.4-phLzTvJt@localhost:5433/postgres?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String           @id @default(uuid())
  email          String           @unique
  name           String
  picture        String?
  forms          Form[]
  formSubmission FormSubmission[]
  uploads        UploadedFile[]
}

model Form {
  id              String             @id @default(uuid())
  name            String
  available       Boolean
  owner           User               @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId         String
  textfields      FormTextfield[]
  checkboxes      FormCheckbox[]
  toggleSwitches  FormToggleSwitch[]
  images          FormImage[]
  buttons         FormButton[]
  labels          FormLabel[]
  formSubmissinos FormSubmission[]
}

model FormSubmission {
  id                   String                     @id @default(uuid())
  name                 String
  public               Boolean
  owner                User                       @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId              String
  form                 Form                       @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId               String
  textfieldResponses   FormTextfieldResponse[]
  checkboxResponse     FormCheckboxResponse[]
  toggleSwitchResponse FormToggleSwitchResponse[]

  @@unique([formId, ownerId])
}

model FormTextfield {
  id        String                  @id @default(uuid())
  form      Form                    @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  responses FormTextfieldResponse[]
}

model FormTextfieldResponse {
  id           String         @id @default(uuid())
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId String
  textfield    FormTextfield  @relation(fields: [textfieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textfieldId  String
  value        String

  @@unique([textfieldId, submissionId])
}

model FormCheckbox {
  id        String                 @id @default(uuid())
  form      Form                   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  order     Int
  responses FormCheckboxResponse[]
}

model FormCheckboxResponse {
  id           String         @id @default(uuid())
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId String
  checkbox     FormCheckbox   @relation(fields: [checkboxId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkboxId   String
  value        String

  @@unique([checkboxId, submissionId])
}

model FormToggleSwitch {
  id        String                     @id @default(uuid())
  form      Form                       @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  order     Int
  responses FormToggleSwitchResponse[]
}

model FormToggleSwitchResponse {
  id             String           @id @default(uuid())
  submission     FormSubmission   @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId   String
  toggleSwitch   FormToggleSwitch @relation(fields: [toggleSwitchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toggleSwitchId String
  value          String

  @@unique([toggleSwitchId, submissionId])
}

model FormImage {
  id      String @id @default(uuid())
  form    Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId  String
  order   Int
  imageId String
}

model FormButton {
  id     String @id @default(uuid())
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId String
  order  Int
  type   String
}

model FormLabel {
  id     String @id @default(uuid())
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId String
  order  Int
  value  String
}

model ImageEvent {
  id      String       @id @default(uuid())
  event   String
  payload String?
  file    UploadedFile @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId  String

  @@unique([fileId, event])
}

model UploadedFile {
  id      String       @id @default(uuid())
  owner   User         @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String
  key     String
  url     String
  events  ImageEvent[]
}
