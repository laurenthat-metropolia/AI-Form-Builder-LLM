datasource db {
  provider          = "postgresql"
  url               = env("APP_DATABASE_URL")
  shadowDatabaseUrl = "postgresql://postgres:V7NHzBm6U.4-phLzTvJt@localhost:5433/postgres?schema=public"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                 String       @id @default(uuid())
  email              String       @unique
  name               String
  picture            String?
  cards              Card[]
  connections        Connection[] @relation("Connection_user")
  reverseConnections Connection[] @relation("Connection_reverseConnections")
  shares             Share[]
}

model Card {
  id              String           @id @default(uuid())
  title           String
  value           String
  picture         String?
  owner           User             @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId         String
  connectionCards ConnectionCard[]
  shareCards      ShareCard[]
}

model Connection {
  id              String           @id @default(uuid())
  user            User             @relation("Connection_user", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  //  User who scans the code
  userId          String
  //  User who shared their code.
  connectedUser   User             @relation("Connection_reverseConnections", fields: [connectedUserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connectedUserId String
  connectionCards ConnectionCard[]

  @@unique([userId, connectedUserId])
}

model ConnectionCard {
  id           String     @id @default(uuid())
  card         Card       @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardId       String
  connection   Connection @relation(fields: [connectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  connectionId String

  @@unique([cardId, connectionId])
}

model Share {
  id     String      @id @default(uuid())
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  cards  ShareCard[]
  tags   Tag[]
}

model ShareCard {
  id      String @id @default(uuid())
  share   Share  @relation(fields: [shareId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareId String
  card    Card   @relation(fields: [cardId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cardId  String

  @@unique([cardId, shareId])
}

model Tag {
  id      String @id @default(uuid())
  share   Share  @relation(fields: [shareId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shareId String
  tagId   String @unique

  @@unique([shareId, tagId])
}
