name: API Deployment
on:
  push:
    branches: [ main ]
permissions: write-all

jobs:
  Version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v3
        with:
            node-version: 18
      - run: cd api && npm ci
      - run: cd api && npm run build
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: "Git: Get Last Tag"
        id: previoussemver
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0
      - name: "Git: Get Next Tag"
        id: nextsemver
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoussemver.outputs.tag }}
      - name: "Github: New Milestone"
        id: createmilestone
        uses: "WyriHaximus/github-action-create-milestone@v1"
        with:
          title: ${{ steps.nextsemver.outputs.patch }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Git: New Tag"
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          version: ${{ steps.nextsemver.outputs.patch }}
          git_tag_prefix: ""
    outputs:
      oldversion: ${{ steps.previoussemver.outputs.tag }}
      version: ${{ steps.nextsemver.outputs.patch }}

  BuildPushDocker:
    runs-on: ubuntu-latest
    needs: [ Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v3
      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login Docker Hub"
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Docker: Build And Push Image"
        uses: docker/build-push-action@v5
        with:
          context: api
          file: api/Dockerfile
          push: true
          tags: ericaskari/draw2form-api:latest,ericaskari/draw2form-api:${{needs.Version.outputs.version}}
          cache-from: type=registry,ref=ericaskari/draw2form-api:latest
          cache-to: type=inline

  Deploy:
      runs-on: ubuntu-latest
      needs: [ BuildPushDocker, Version ]
      env:
        APP_OAUTH2_CLIENT_ID: ${{ secrets.APP_OAUTH2_CLIENT_ID }}
        APP_OAUTH2_CLIENT_SECRET: ${{ secrets.APP_OAUTH2_CLIENT_SECRET }}
        APP_OAUTH2_CALLBACK_URL: ${{ secrets.APP_OAUTH2_CALLBACK_URL }}
        APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET }}
        APP_SESSION_SECRET: ${{ secrets.APP_SESSION_SECRET }}
        APP_ANDROID_SHA256_CERT_FINGERPRINT: ${{ secrets.APP_ANDROID_SHA256_CERT_FINGERPRINT }}
        APP_JWT_ISSUER: ${{ secrets.APP_JWT_ISSUER }}
        APP_JWT_AUDIENCE: ${{ secrets.APP_JWT_AUDIENCE }}
        APP_DATABASE_URL: ${{ secrets.APP_DATABASE_URL }}

      steps:
        - name: "Git: Pull Source Code"
          uses: actions/checkout@v3
        - name: "Configure: kubectl"
          uses: ./.github/workflows/configure-kubectl
          with:
            KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}
        - name: "Configure: yq"
          uses: dcarbone/install-yq-action@v1.1.1
        - name: "Kubernetes: Deploy"
          run: |
            export IMAGE_TAG=ericaskari/draw2form-api:${{needs.Version.outputs.version}}
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].image = env(IMAGE_TAG)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[0].value = env(APP_OAUTH2_CLIENT_ID)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[1].value = env(APP_OAUTH2_CLIENT_SECRET)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[2].value = env(APP_OAUTH2_CALLBACK_URL)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[3].value = env(APP_JWT_SECRET)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[4].value = env(APP_SESSION_SECRET)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[5].value = env(APP_ANDROID_SHA256_CERT_FINGERPRINT)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[6].value = env(APP_JWT_ISSUER)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[7].value = env(APP_JWT_AUDIENCE)' api/deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[8].value = env(APP_DATABASE_URL)' api/deployment.yml
            kubectl apply --filename api/deployment.yml
      

