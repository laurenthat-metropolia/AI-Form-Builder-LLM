name: Deployment
on:
  push:
    branches: [ main ]
permissions: write-all

jobs:
  Version:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: "Git: Get Last Tag"
        id: previoussemver
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0
      - name: "Git: Get Next Tag"
        id: nextsemver
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoussemver.outputs.tag }}
      - name: "Git: New Tag"
        if: github.ref == 'refs/heads/main'
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          version: ${{ steps.nextsemver.outputs.patch }}
          git_tag_prefix: ""
    outputs:
      oldversion: ${{ steps.previoussemver.outputs.tag }}
      version: ${{ steps.nextsemver.outputs.patch }}

  BuildPushDockerAPI:
    runs-on: ubuntu-latest
    needs: [ Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: 'node_modules'
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login Docker Hub"
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: npm install
      - run: CI=false npm run build:api
      - name: "Docker: Build And Push Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/api/Dockerfile
          push: true
          tags: ericaskari/draw2form-api:latest,ericaskari/draw2form-api:${{needs.Version.outputs.version}}
          cache-from: type=registry,ref=ericaskari/draw2form-api:latest
          cache-to: type=inline
          build-args: |
            APP_BUILD_VERSION=${{needs.Version.outputs.version}}
  BuildPushDockerWeb:
    runs-on: ubuntu-latest
    needs: [ Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v4
      - uses: actions/cache@v3
        with:
          path: 'node_modules'
          key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - uses: actions/setup-node@v4
        with:
          node-version: 18
      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login Docker Hub"
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - run: npm install
      - run: CI=false npm run build:web
      - name: "Docker: Build And Push Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/web/Dockerfile
          push: true
          tags: ericaskari/draw2form-web:latest,ericaskari/draw2form-web:${{needs.Version.outputs.version}}
          cache-from: type=registry,ref=ericaskari/draw2form-web:latest
          cache-to: type=inline
          build-args: |
            APP_BUILD_VERSION=${{needs.Version.outputs.version}}
  BuildPushDockerLLM:
    runs-on: ubuntu-latest
    needs: [ Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v4
      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login Docker Hub"
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Docker: Build And Push Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: apps/llm/Dockerfile
          push: true
          tags: ericaskari/draw2form-llm:latest,ericaskari/draw2form-llm:${{needs.Version.outputs.version}}
          cache-from: type=registry,ref=ericaskari/draw2form-llm:latest
          cache-to: type=inline
          build-args: |
            APP_BUILD_VERSION=${{needs.Version.outputs.version}}

  Deploy:
      runs-on: ubuntu-latest
      needs: [ Version, BuildPushDockerAPI, BuildPushDockerLLM, BuildPushDockerWeb ]
      env:
        APP_OAUTH2_CLIENT_ID: ${{ secrets.APP_OAUTH2_CLIENT_ID }}
        APP_OAUTH2_CLIENT_SECRET: ${{ secrets.APP_OAUTH2_CLIENT_SECRET }}
        APP_OAUTH2_CALLBACK_URL: ${{ secrets.APP_OAUTH2_CALLBACK_URL }}
        APP_JWT_SECRET: ${{ secrets.APP_JWT_SECRET }}
        APP_SESSION_SECRET: ${{ secrets.APP_SESSION_SECRET }}
        APP_ANDROID_SHA256_CERT_FINGERPRINT: ${{ secrets.APP_ANDROID_SHA256_CERT_FINGERPRINT }}
        APP_JWT_ISSUER: ${{ secrets.APP_JWT_ISSUER }}
        APP_JWT_AUDIENCE: ${{ secrets.APP_JWT_AUDIENCE }}
        APP_DATABASE_URL: ${{ secrets.APP_DATABASE_URL }}
        APP_SERVER_ADDR: https://draw2form-llm.ericaskari.com
        APP_ROBOFLOW_API_KEY: ${{ secrets.APP_ROBOFLOW_API_KEY }}
        APP_OPENAI_ORGANIZATION: ${{ secrets.APP_OPENAI_ORGANIZATION }}
        APP_OPENAI_API_KEY: ${{ secrets.APP_OPENAI_API_KEY }}
        APP_S3_ENDPOINT: ${{ secrets.APP_S3_ENDPOINT }}
        APP_S3_ACCESS_KEY: minio
        APP_S3_SECRET_KEY: ${{ secrets.APP_S3_SECRET_KEY }}
        APP_COMPUTER_VISION_KEY: ${{ secrets.APP_COMPUTER_VISION_KEY }}
        APP_COMPUTER_VISION_ENDPOINT: ${{ secrets.APP_COMPUTER_VISION_ENDPOINT }}
        APP_REDIS_HOSTNAME: ${{ secrets.APP_REDIS_HOSTNAME }}
        APP_REDIS_PASSWORD: ${{ secrets.APP_REDIS_PASSWORD }}
        NODE_ENV: production
        APP_ENV: production

      steps:
        - name: "Git: Pull Source Code"
          uses: actions/checkout@v3
        - name: "Configure: kubectl"
          uses: ./.github/workflows/configure-kubectl
          with:
            KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}
        - name: "Configure: yq"
          uses: dcarbone/install-yq-action@v1.1.1
        - name: "Kubernetes: Deploy"
          run: |
            export IMAGE_TAG=ericaskari/draw2form-api:${{needs.Version.outputs.version}}
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].image = env(IMAGE_TAG)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[0].value = env(APP_OAUTH2_CLIENT_ID)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[1].value = env(APP_OAUTH2_CLIENT_SECRET)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[2].value = env(APP_OAUTH2_CALLBACK_URL)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[3].value = env(APP_JWT_SECRET)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[4].value = env(APP_SESSION_SECRET)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[5].value = env(APP_ANDROID_SHA256_CERT_FINGERPRINT)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[6].value = env(APP_JWT_ISSUER)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[7].value = env(APP_JWT_AUDIENCE)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[8].value = env(APP_DATABASE_URL)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[9].value = env(APP_S3_ENDPOINT)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[10].value = env(APP_S3_ACCESS_KEY)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[11].value = env(APP_S3_SECRET_KEY)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[12].value = env(APP_COMPUTER_VISION_KEY)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[13].value = env(APP_COMPUTER_VISION_ENDPOINT)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[14].value = env(APP_OPENAI_API_KEY)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[15].value = env(APP_OPENAI_ORGANIZATION)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[16].value = env(NODE_ENV)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[17].value = env(APP_REDIS_HOSTNAME)' deployment.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].env[18].value = env(APP_REDIS_PASSWORD)' deployment.yml

            export IMAGE_TAG=ericaskari/draw2form-web:${{needs.Version.outputs.version}}
            yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[1].image = env(IMAGE_TAG)' deployment.yml
            
            export IMAGE_TAG=ericaskari/draw2form-llm:${{needs.Version.outputs.version}}
            yq e -i 'select(.metadata.name == "deployment-draw2form-llm") .spec.template.spec.containers[0].image = env(IMAGE_TAG)' deployment-llm.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form-llm") .spec.template.spec.containers[0].env[0].value = env(APP_ROBOFLOW_API_KEY)' deployment-llm.yml
            yq e -i 'select(.metadata.name == "deployment-draw2form-llm") .spec.template.spec.containers[0].env[1].value = env(APP_ENV)' deployment-llm.yml

            kubectl apply --filename deployment.yml
            kubectl apply --filename deployment-llm.yml


