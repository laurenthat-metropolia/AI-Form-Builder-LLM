name: Build And Deployment
on:
  workflow_dispatch:
  push:
    branches: [ main, cicd ]
permissions: write-all

jobs:
  Version:
    runs-on: ubuntu-latest
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Required due to the way Git works, without it this action won't be able to find any or the correct tags
      - name: "Git: Get Last Tag"
        id: previoussemver
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: 1.0.0
      - name: "Git: Get Next Tag"
        id: nextsemver
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoussemver.outputs.tag }}
      - name: "Github: New Milestone"
        id: createmilestone
        uses: "WyriHaximus/github-action-create-milestone@v1"
        with:
          title: ${{ steps.nextsemver.outputs.patch }}
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: "Git: New Tag"
        uses: pkgdeps/git-tag-action@v2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          github_repo: ${{ github.repository }}
          git_commit_sha: ${{ github.sha }}
          version: ${{ steps.nextsemver.outputs.patch }}
          git_tag_prefix: ""
    outputs:
      oldversion: ${{ steps.previoussemver.outputs.tag }}
      version: ${{ steps.nextsemver.outputs.patch }}

  BuildPushDocker:
    runs-on: ubuntu-latest
    needs: [ Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v3
      - name: "Docker: Set up QEMU"
        uses: docker/setup-qemu-action@v3
      - name: "Docker: Set up Buildx"
        uses: docker/setup-buildx-action@v3
      - name: "Docker: Login Docker Hub"
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: "Docker: Build And Push Image"
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ericaskari/llm-wireframe:latest,ericaskari/llm-wireframe:${{needs.Version.outputs.version}}
          cache-from: type=registry,ref=ericaskari/llm-wireframe:latest
          cache-to: type=inline

  Deploy:
    runs-on: ubuntu-latest
    needs: [ BuildPushDocker, Version ]
    steps:
      - name: "Git: Pull Source Code"
        uses: actions/checkout@v3
      - name: "Configure: kubectl"
        uses: ./.github/workflows/configure-kubectl
        with:
          KUBE_CONFIG_BASE64: ${{ secrets.KUBE_CONFIG_BASE64 }}
      - name: "Configure: yq"
        uses: dcarbone/install-yq-action@v1.1.1
      - name: "Kubernetes: Deploy"
        run: |
          export IMAGE_TAG=ericaskari/llm-wireframe:${{needs.Version.outputs.version}}
          yq e -i 'select(.metadata.name == "deployment-draw2form") .spec.template.spec.containers[0].image = env(IMAGE_TAG)' deployment.yml
          kubectl apply --filename ./deployment.yml
      - name: "Git: Commit"
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "[skip ci] Deployed to Production environment ${{ needs.BuildPushDocker.outputs.image }}"
#  Train:
#    runs-on: self-hosted
#    steps:
#      - name: Pull Source Code
#        uses: actions/checkout@v3
#      - uses: conda-incubator/setup-miniconda@v2
#        with:
#          auto-update-conda: true
#          python-version: ${{ matrix.python-version }}
#      - name: Conda info
#        shell: bash -el {0}
#        run: conda info
#      - name: Conda list
#        shell: pwsh
#        run: conda list
#      - name: Train
#        shell: C:\Users\Eric\miniconda3\Scripts\activate.bat
#        run: |
#          C:\Users\Eric\miniconda3\Scripts\activate.bat
#          dir
#          python train.py
