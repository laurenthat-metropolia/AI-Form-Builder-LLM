datasource db {
  provider          = "postgresql"
  url               = env("APP_DATABASE_URL")
  shadowDatabaseUrl = "postgresql://postgres:V7NHzBm6U.4-phLzTvJt@localhost:5433/postgres?schema=public"
  //   export APP_DATABASE_URL=postgresql://postgres:V7NHzBm6U.4-phLzTvJt@localhost:5432/postgres?schema=public
}

generator client {
  provider = "prisma-client-js"
}

generator prismaClassGenerator {
  provider = "prisma-class-generator"
  dryRun   = false
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String
  picture         String?
  forms           Form[]
  formSubmissions FormSubmission[]
}

model Form {
  id              String             @id @default(uuid())
  name            String
  status          String // "DRAFT" | "PUBLISHED"
  owner           User               @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId         String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  textFields      FormTextField[]
  checkboxes      FormCheckbox[]
  toggleSwitches  FormToggleSwitch[]
  images          FormImage[]
  buttons         FormButton[]
  labels          FormLabel[]
  upload          UploadedFile?
  formSubmissinos FormSubmission[]
}

model FormSubmission {
  id                    String                     @id @default(uuid())
  name                  String
  status                String // "DRAFT" | "PUBLISHED"
  owner                 User                       @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId               String
  form                  Form                       @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId                String
  textFieldResponses    FormTextFieldResponse[]
  checkboxResponses     FormCheckboxResponse[]
  toggleSwitchResponses FormToggleSwitchResponse[]

  @@unique([formId, ownerId])
}

model FormTextField {
  id        String                  @id @default(uuid())
  form      Form                    @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  label     String
  order     Int
  responses FormTextFieldResponse[]
}

model FormTextFieldResponse {
  id           String         @id @default(uuid())
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId String
  textField    FormTextField  @relation(fields: [textFieldId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  textFieldId  String
  value        String

  @@unique([textFieldId, submissionId])
}

model FormCheckbox {
  id        String                 @id @default(uuid())
  label     String
  form      Form                   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  order     Int
  responses FormCheckboxResponse[]
}

model FormCheckboxResponse {
  id           String         @id @default(uuid())
  submission   FormSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId String
  checkbox     FormCheckbox   @relation(fields: [checkboxId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  checkboxId   String
  value        String

  @@unique([checkboxId, submissionId])
}

model FormToggleSwitch {
  id        String                     @id @default(uuid())
  label     String
  form      Form                       @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId    String
  order     Int
  responses FormToggleSwitchResponse[]
}

model FormToggleSwitchResponse {
  id             String           @id @default(uuid())
  submission     FormSubmission   @relation(fields: [submissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  submissionId   String
  toggleSwitch   FormToggleSwitch @relation(fields: [toggleSwitchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  toggleSwitchId String
  value          String

  @@unique([toggleSwitchId, submissionId])
}

model FormImage {
  id      String @id @default(uuid())
  form    Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId  String
  order   Int
  imageId String
}

model FormButton {
  id     String @id @default(uuid())
  label  String
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId String
  order  Int
  type   String
}

model FormLabel {
  id     String @id @default(uuid())
  form   Form   @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId String
  order  Int
  label  String
}

model ImageEvent {
  id        String       @id @default(uuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  event     String
  payload   Json?
  file      UploadedFile @relation(fields: [fileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  fileId    String

  @@unique([fileId, event])
}

model UploadedFile {
  id     String       @id @default(uuid())
  form   Form?        @relation(fields: [formId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  formId String?      @unique
  key    String
  url    String
  events ImageEvent[]
}
